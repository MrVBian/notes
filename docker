交互式容器：
	docker run IMAG echo "hello world"
	docker run -i -t ubuntu /bin/bash

	查看容器
	docker ps			查看正在运行的容器
	docker ps -a		查看全部容器
	docker ps -a -l
	docker inspect IMAG

	自定义容器名
	docker run --name=自定义名 -i -t IMAGE /bin/bash

	重新启动已停止的容器
	docker start -i IMAGE

	删除停止的容器
	docker rm 容器名

守护式容器：
	启动守护式容器方式1
	docker run -i -t IMAG /bin/bash
	ctrl+p  ctrl+q

	启动守护式容器方式2
	附加到运行中的容器：
	docker attach 容器名

	启动守护式容器方式3
	docker run -d 镜像名 [COMMAND|ARG...]

	查看容器日志
	docker logs [-f][-t][--tail] 容器名
		-f	--follows=true | false 默认为false		一直跟踪并返回结果
		-t  --timestamps=true | false 默认为false	带时间戳
		--tail="all"								返回结尾处多少数量的日志	docker logs -t 10 IMAG

	查看容器内进程：
	docker top 容器名

	在运行中的容器内启动新进程：
	docker exec [-d][-i][-t] 容器名 [COMMAND][ARG...]

	停止守护式容器
	docker stop 容器名			发送信号让其停止
	docker kill 容器名			直接强制瞬间停止

	使用docker帮助文件
	man docker-run
	man docker-logs
	man docker-top
	man docker-exec

在容器中部署静态网站	——设置容器的端口映射
	设置容器的端口映射
	run [-P][-p]
		-P, --publish-all=true | false 默认为false
			docker run -P -i -t ubuntu /bin/bash
		-p, --publish=[]
			containerPort
			docker run -p 80 -i -t ubuntu /bin/bash


Dockerfile指令(上) 指令格式

	# Comment
	INSTRUCTION argument
		from
		maintainer
		run
		expose

	from <image>
	from <image>:<tag>
		已经存在的镜像
		基础镜像
		必须是第一条非注释指令

	maintainer<name>
	指定镜像的作者信息，包括镜像的所有者和联系信息

	run <command> (shell模式)
	run ["executable", "param1", "param2"] (exec模式)

	run<command> (shell模式)
		/bin/sh -c command
			run echo hello
	run ["executable", "param1", "param2"] (exec模式)	
		run ["/bin/bash", "-c", "echo hello"]

	expose<port>[<port>...]		指定运行该镜像的容器使用的端口
		docker run -p 80 -d dormancypress/df_test1 nginx -g "daemon off";

	
	Dockerfile指令(上) 指令格式
		cmd["executable", "param1", "param2"](exec模式)
		cmd command param1 param2(shell模式)
		cmd["param1", "param2"](作为ENTRYPOINT指令的默认参数)

	



开发者测试：Junit
web应用测试：Selemium
移动应用测试：Appium
嵌入式测试




map<space>h <C-w>h
map<space>i <C-w>i
map<space>k <C-w>k
map<space>l <C-w>l

map<up> :res +5<CR>
map<down> :res -5<CR>
map<left> :vertical resize-5<CR>
map<right> :vertical resize+5<CR>









