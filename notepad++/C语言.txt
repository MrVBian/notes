一：数据类型：	
	 1基本数据类型常用格式符汇总：

		 数值：	int       :   %d  输入输出整型数据
				long long :  %ld  输入输出长整型数据
		 浮点 	float     :   %f：输出单（双）精度浮点型数据，输入单精度型数据。
				double	  :  %lf：输入双精度型数据
		 布尔	bool	  :	  %d
		 字符	char      :   %c  输入输出字符型数据
		 字符串 char []   :   %s：输入输出一个字符串
								 如：用printf输出字符串时，输出项书写时可为字符串常量
									 printf(“%s”,”hello”);					
								 或：用printf输出字符串时，字符数组名
									 char str[10]=”hello”; printf(“%s”,str);
		 %u：输入输出无符号整型
		 %o：输入输出八进制数             
		 %x: 输入输出十六进制数
		 
	 2自定义类型
		 struct		结构类型 
		 union		联合类型
		 enum		枚举类型
		 
	 3指针类型

	 
二：转义字符：
	 
	 转义字符		意义
	 
	 \a				响铃
	 \b				退格
	 \n				换行
	 \t				水平制表符
	 \v				垂直制表符
	 \f 			换页

三：循环语句
	 1 for循环语句
		 for ( 表达式1 : 表达式2 : 表达式3 )
			 循环体语句
			 
	     语句执行过程：
			 1.	计算表达式1
			 2.	判断表达式2的值是否为0，若为0，语句执行结束，若不为0，进入步骤3
			 3.	执行循环体语句（需注意的是循环体语句只能有一个语句，若要包含多个语句要用一对{}括起来，
			    构成一条复合语句，此处也不要随便加上 “ ; ”，因一个“；”可构成一条空语句，这会使得后面
				真正的循环体语句不属于for循环语句的部分）。进入步骤4
			 4.	计算表达式3，然后重新进入步骤2
	
	 2 while循环语句
		 
		 <1>
		 while(表达式) 
			 循环体语句
			 
		 执行过程：
			 1.	判断表达式的值是否为非0，若是进入步骤2，否则结束语句执行。
			 2.	执行循环体语句，重新回到步骤1。
			 
		 
		 <2>
		 do  
			循环体语句  
		 while(表达式)；

		 执行过程：
			 1.执行循环体语句，进入步骤2
			 2.判断表达式的值是否为非0，若是重新回到步骤1，否则结束语句执行。
	 
	 3 break语句
			 放在循环体内实现的功能是结束其所在的那层循环的执行。
			 

四：函数

	 函数定义
	 函数类型  函数名( 形式参数列表 )
	 {
         内部变量定义和声明部分
	     执行语句
	 }
	 
	 如：
	 int xiaoYanMax(int x,int y)
	 {
		 if( x > y )
			 return x;
		 else
			 return y;
	 }

五：选择结构语句
	 
	 if(表达式) 
		 语句1 
	 else 
		 语句2 
	
	 执行过程：
		 如果if语句的圆括号内的表达式值为非0，则执行语句1，值为0则执行语句2。
		 表达式可为任意表达式，if语句执行的实质是判断表达式的值是否为0来决定执行语句1还是语句2
	 
	 if语句的三种结构：
		 单边：
			 if(表达式)
				 语句
		 双边：
			 if(表达式)
				 语句1
			 else
				 语句2
		 多层：
			 if(表达式1) 
				 语句1 
			 else if(表达式2) 
				 语句2 
			 else if(表达式3) 
				 语句3
			 …
				 …
			 else 
				 语句n

	 
			 
五：常用string.h函数

	 gets(字符数组名或字符指针变量)；
		 如char str[10],* str2; str2=str;则gets(str)；或gets(str2)；都是接收用户输入的字符串如“ABC”存
		 入到字符数组str中
	
	 puts(字符数组名或字符指针变量或字符串常量)；
		 如char str[10]=”china”;	char *str2;str=str2;  则puts(str); 或puts(str2); 或 puts(“china”);
		 都会在屏幕上打印出 china
	
	 strlen(字符数组名或字符指针变量);字符串测长函数
		 char str[20]=”hello world!”;  
		 int len;len=strlen(str);得出的结果是len的值为12
	
	 strcat(字符串1的地址，字符串2的地址)；
		 将字符串2的内容连接到字符串1的尾部。
		 char str1[20]=”ABC”,str2[20]=”xyz”; 

	 strcat(str1,str2); 
		 则程序运行的结果是str1内存放的字符串变为ABCxyz，当然str2存放的字符串还是xyz。
	
	 strcmp(字符串1的地址，字符串2的地址)；
		 比较串1和串2哪个比较大。比较大小的依据是，两个字符串从左往右相应位置上第一个不相等的字符ASCII
		 码值之差。
		 char str1[20]=”ABCE”,str2[20]=”ABDE”; 
		 int i;
		 i=strcmp (str1,str2);
		 第一个不相等的字符为str1的‘C’和str2的‘D’，而二者相差-1，故-1做为strcmp函数执行的结果返回到被
		 调用的位置，该位置位于赋值表达式内，故将其值赋值给i，即此时i的值就是-1.
	
	 strcpy(字符串1的地址，字符串2的地址)；
		 将字符串2的内容复制到字符串1内。
		 char str1[20]=”ABC”,str2[20]=”xyz”;
		 strcpy(str1,str2);此时str1的内容为”xyz”，当然str2的内容没变
		 strcpy(str1,”uvw”);此时str1的内容又变成了“uvw“。

			 
六：冒泡排序代码：

#include <stdio.h>

// 分类 -------------- 内部比较排序
// 数据结构 ---------- 数组
// 平均时间复杂度 ---- O(n^2)
// 所需辅助空间 ------ O(1)
// 稳定性 ------------ 稳定

void Swap(int A[], int i, int j)
{
    int temp = A[i];
    A[i] = A[j];
    A[j] = temp;
}

void BubbleSort(int A[], int n)
{
    for (int j = 0; j < n - 1; j++)         // 每次最大元素就像气泡一样"浮"到数组的最后
    {
        for (int i = 0; i < n - 1 - j; i++) // 依次比较相邻的两个元素,使较大的那个向后移
        {
            if (A[i] > A[i + 1])            // 如果条件改成A[i] >= A[i + 1],则变为不稳定的排序算法
            {
                Swap(A, i, i + 1);
            }
        }
    }
}

int main()
{
    int A[] = { 6, 5, 3, 1, 8, 7, 2, 4 };    // 从小到大冒泡排序
    int n = sizeof(A) / sizeof(int);
    BubbleSort(A, n);
    printf("冒泡排序结果：");
    for (int i = 0; i < n; i++)
    {
        printf("%d ", A[i]);
    }
    printf("\n");
    return 0;
}

	 
	 
